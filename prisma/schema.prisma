// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  phone String? @unique
  github_id String? @unique
  avatar String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tokens SMSToken[]
  bio String?
  tweets Tweet[]
  tweetLike TweetLike[]
  Like Like[]
  products    Product[]
  posts Post[]
  Comment Comment[]
  bookmarks BookMark[]
}

model SMSToken{
  id Int @id @default(autoincrement())
  token String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  bookmark  BookMark[]
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
  @@id(name: "id", [userId, postId])
}

model Tweet{
  tweetId Int @id @default(autoincrement())
  content String
  photo   String
  views   Int     @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  likes TweetLike[]
}

model TweetLike{
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)
  userId Int
  tweetId Int
  @@id(name: "id", [userId, tweetId])
}

model BookMark{
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId Int
  productId Int
  @@id(name: "id", [userId, productId])
}